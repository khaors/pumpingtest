// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// factorial_cpp
double factorial_cpp(const int& n);
RcppExport SEXP _pumpingtest_factorial_cpp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(factorial_cpp(n));
    return rcpp_result_gen;
END_RCPP
}
// stehfest_coefficients_cpp
NumericVector stehfest_coefficients_cpp(const int& n);
RcppExport SEXP _pumpingtest_stehfest_coefficients_cpp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(stehfest_coefficients_cpp(n));
    return rcpp_result_gen;
END_RCPP
}
// theis_WF_LT_cpp
NumericVector theis_WF_LT_cpp(NumericVector p, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_theis_WF_LT_cpp(SEXP pSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(theis_WF_LT_cpp(p, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// papadopulos_cooper_WF_LT_cpp
NumericVector papadopulos_cooper_WF_LT_cpp(NumericVector p, const double& alpha, const double& rho, const double& par);
RcppExport SEXP _pumpingtest_papadopulos_cooper_WF_LT_cpp(SEXP pSEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(papadopulos_cooper_WF_LT_cpp(p, alpha, rho, par));
    return rcpp_result_gen;
END_RCPP
}
// boulton_WF_LT_cpp
NumericVector boulton_WF_LT_cpp(NumericVector p, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_boulton_WF_LT_cpp(SEXP pSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(boulton_WF_LT_cpp(p, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// hantush_jacob_WF_LT_cpp
NumericVector hantush_jacob_WF_LT_cpp(NumericVector p, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_hantush_jacob_WF_LT_cpp(SEXP pSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(hantush_jacob_WF_LT_cpp(p, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// agarwal_recovery_WF_LT_cpp
NumericVector agarwal_recovery_WF_LT_cpp(NumericVector p, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_agarwal_recovery_WF_LT_cpp(SEXP pSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(agarwal_recovery_WF_LT_cpp(p, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// agarwal_skin_WF_LT_cpp
NumericVector agarwal_skin_WF_LT_cpp(NumericVector p, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_agarwal_skin_WF_LT_cpp(SEXP pSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(agarwal_skin_WF_LT_cpp(p, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// general_radial_flow_WF_LT_cpp
NumericVector general_radial_flow_WF_LT_cpp(NumericVector p, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_general_radial_flow_WF_LT_cpp(SEXP pSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(general_radial_flow_WF_LT_cpp(p, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// cooper_WF_LT_cpp
NumericVector cooper_WF_LT_cpp(NumericVector p, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_cooper_WF_LT_cpp(SEXP pSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(cooper_WF_LT_cpp(p, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// neuzil_WF_LT_cpp
NumericVector neuzil_WF_LT_cpp(NumericVector p, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_neuzil_WF_LT_cpp(SEXP pSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(neuzil_WF_LT_cpp(p, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// callViaString
NumericVector callViaString(NumericVector x, const double& arg1, const double& arg2, const double& arg3, std::string funname);
RcppExport SEXP _pumpingtest_callViaString(SEXP xSEXP, SEXP arg1SEXP, SEXP arg2SEXP, SEXP arg3SEXP, SEXP funnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type arg1(arg1SEXP);
    Rcpp::traits::input_parameter< const double& >::type arg2(arg2SEXP);
    Rcpp::traits::input_parameter< const double& >::type arg3(arg3SEXP);
    Rcpp::traits::input_parameter< std::string >::type funname(funnameSEXP);
    rcpp_result_gen = Rcpp::wrap(callViaString(x, arg1, arg2, arg3, funname));
    return rcpp_result_gen;
END_RCPP
}
// callViaXPtr
NumericVector callViaXPtr(NumericVector x, const double& arg1, const double& arg2, const double& arg3, SEXP xpsexp);
RcppExport SEXP _pumpingtest_callViaXPtr(SEXP xSEXP, SEXP arg1SEXP, SEXP arg2SEXP, SEXP arg3SEXP, SEXP xpsexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type arg1(arg1SEXP);
    Rcpp::traits::input_parameter< const double& >::type arg2(arg2SEXP);
    Rcpp::traits::input_parameter< const double& >::type arg3(arg3SEXP);
    Rcpp::traits::input_parameter< SEXP >::type xpsexp(xpsexpSEXP);
    rcpp_result_gen = Rcpp::wrap(callViaXPtr(x, arg1, arg2, arg3, xpsexp));
    return rcpp_result_gen;
END_RCPP
}
// stehfest_inversion_cpp
NumericVector stehfest_inversion_cpp(NumericVector t, NumericVector coeffs, std::string funname, const double& arg1, const double& arg2, const double& arg3);
RcppExport SEXP _pumpingtest_stehfest_inversion_cpp(SEXP tSEXP, SEXP coeffsSEXP, SEXP funnameSEXP, SEXP arg1SEXP, SEXP arg2SEXP, SEXP arg3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coeffs(coeffsSEXP);
    Rcpp::traits::input_parameter< std::string >::type funname(funnameSEXP);
    Rcpp::traits::input_parameter< const double& >::type arg1(arg1SEXP);
    Rcpp::traits::input_parameter< const double& >::type arg2(arg2SEXP);
    Rcpp::traits::input_parameter< const double& >::type arg3(arg3SEXP);
    rcpp_result_gen = Rcpp::wrap(stehfest_inversion_cpp(t, coeffs, funname, arg1, arg2, arg3));
    return rcpp_result_gen;
END_RCPP
}
// theis_well_function_cpp
NumericVector theis_well_function_cpp(NumericVector td, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_theis_well_function_cpp(SEXP tdSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type td(tdSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(theis_well_function_cpp(td, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// erf_cpp
double erf_cpp(double x);
RcppExport SEXP _pumpingtest_erf_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(erf_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// boulton_well_function_cpp
NumericVector boulton_well_function_cpp(NumericVector td, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_boulton_well_function_cpp(SEXP tdSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type td(tdSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(boulton_well_function_cpp(td, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// hantush_jacob_well_function_cpp
NumericVector hantush_jacob_well_function_cpp(NumericVector td, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_hantush_jacob_well_function_cpp(SEXP tdSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type td(tdSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(hantush_jacob_well_function_cpp(td, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// general_radial_flow_well_function_cpp
NumericVector general_radial_flow_well_function_cpp(NumericVector td, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_general_radial_flow_well_function_cpp(SEXP tdSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type td(tdSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(general_radial_flow_well_function_cpp(td, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// papadopulos_cooper_well_function_cpp
NumericVector papadopulos_cooper_well_function_cpp(NumericVector td, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_papadopulos_cooper_well_function_cpp(SEXP tdSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type td(tdSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(papadopulos_cooper_well_function_cpp(td, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// cooper_well_function_cpp
NumericVector cooper_well_function_cpp(NumericVector td, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_cooper_well_function_cpp(SEXP tdSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type td(tdSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(cooper_well_function_cpp(td, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// neuzil_well_function_cpp
NumericVector neuzil_well_function_cpp(NumericVector td, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_neuzil_well_function_cpp(SEXP tdSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type td(tdSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(neuzil_well_function_cpp(td, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// agarwal_skin_well_function_cpp
NumericVector agarwal_skin_well_function_cpp(NumericVector td, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_agarwal_skin_well_function_cpp(SEXP tdSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type td(tdSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(agarwal_skin_well_function_cpp(td, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// warren_root_well_function_cpp
NumericVector warren_root_well_function_cpp(NumericVector td, const double& par1, const double& par2, const double& par3);
RcppExport SEXP _pumpingtest_warren_root_well_function_cpp(SEXP tdSEXP, SEXP par1SEXP, SEXP par2SEXP, SEXP par3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type td(tdSEXP);
    Rcpp::traits::input_parameter< const double& >::type par1(par1SEXP);
    Rcpp::traits::input_parameter< const double& >::type par2(par2SEXP);
    Rcpp::traits::input_parameter< const double& >::type par3(par3SEXP);
    rcpp_result_gen = Rcpp::wrap(warren_root_well_function_cpp(td, par1, par2, par3));
    return rcpp_result_gen;
END_RCPP
}
// theis_solution_space
NumericMatrix theis_solution_space(const double& Q, const double& t, NumericVector hydrpar, NumericMatrix r);
RcppExport SEXP _pumpingtest_theis_solution_space(SEXP QSEXP, SEXP tSEXP, SEXP hydrparSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hydrpar(hydrparSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(theis_solution_space(Q, t, hydrpar, r));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pumpingtest_factorial_cpp", (DL_FUNC) &_pumpingtest_factorial_cpp, 1},
    {"_pumpingtest_stehfest_coefficients_cpp", (DL_FUNC) &_pumpingtest_stehfest_coefficients_cpp, 1},
    {"_pumpingtest_theis_WF_LT_cpp", (DL_FUNC) &_pumpingtest_theis_WF_LT_cpp, 4},
    {"_pumpingtest_papadopulos_cooper_WF_LT_cpp", (DL_FUNC) &_pumpingtest_papadopulos_cooper_WF_LT_cpp, 4},
    {"_pumpingtest_boulton_WF_LT_cpp", (DL_FUNC) &_pumpingtest_boulton_WF_LT_cpp, 4},
    {"_pumpingtest_hantush_jacob_WF_LT_cpp", (DL_FUNC) &_pumpingtest_hantush_jacob_WF_LT_cpp, 4},
    {"_pumpingtest_agarwal_recovery_WF_LT_cpp", (DL_FUNC) &_pumpingtest_agarwal_recovery_WF_LT_cpp, 4},
    {"_pumpingtest_agarwal_skin_WF_LT_cpp", (DL_FUNC) &_pumpingtest_agarwal_skin_WF_LT_cpp, 4},
    {"_pumpingtest_general_radial_flow_WF_LT_cpp", (DL_FUNC) &_pumpingtest_general_radial_flow_WF_LT_cpp, 4},
    {"_pumpingtest_cooper_WF_LT_cpp", (DL_FUNC) &_pumpingtest_cooper_WF_LT_cpp, 4},
    {"_pumpingtest_neuzil_WF_LT_cpp", (DL_FUNC) &_pumpingtest_neuzil_WF_LT_cpp, 4},
    {"_pumpingtest_callViaString", (DL_FUNC) &_pumpingtest_callViaString, 5},
    {"_pumpingtest_callViaXPtr", (DL_FUNC) &_pumpingtest_callViaXPtr, 5},
    {"_pumpingtest_stehfest_inversion_cpp", (DL_FUNC) &_pumpingtest_stehfest_inversion_cpp, 6},
    {"_pumpingtest_theis_well_function_cpp", (DL_FUNC) &_pumpingtest_theis_well_function_cpp, 4},
    {"_pumpingtest_erf_cpp", (DL_FUNC) &_pumpingtest_erf_cpp, 1},
    {"_pumpingtest_boulton_well_function_cpp", (DL_FUNC) &_pumpingtest_boulton_well_function_cpp, 4},
    {"_pumpingtest_hantush_jacob_well_function_cpp", (DL_FUNC) &_pumpingtest_hantush_jacob_well_function_cpp, 4},
    {"_pumpingtest_general_radial_flow_well_function_cpp", (DL_FUNC) &_pumpingtest_general_radial_flow_well_function_cpp, 4},
    {"_pumpingtest_papadopulos_cooper_well_function_cpp", (DL_FUNC) &_pumpingtest_papadopulos_cooper_well_function_cpp, 4},
    {"_pumpingtest_cooper_well_function_cpp", (DL_FUNC) &_pumpingtest_cooper_well_function_cpp, 4},
    {"_pumpingtest_neuzil_well_function_cpp", (DL_FUNC) &_pumpingtest_neuzil_well_function_cpp, 4},
    {"_pumpingtest_agarwal_skin_well_function_cpp", (DL_FUNC) &_pumpingtest_agarwal_skin_well_function_cpp, 4},
    {"_pumpingtest_warren_root_well_function_cpp", (DL_FUNC) &_pumpingtest_warren_root_well_function_cpp, 4},
    {"_pumpingtest_theis_solution_space", (DL_FUNC) &_pumpingtest_theis_solution_space, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_pumpingtest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
