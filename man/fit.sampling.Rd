% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pumpingtest.R
\name{fit.sampling}
\alias{fit.sampling}
\title{fit.sampling}
\usage{
fit.sampling(ptest, model, method = "amcmc", prior.pdf, prior.parameters,
  iterations = 10000, burnIn = 0.8 * iterations, seed = 12345,
  proposal.sigma = NULL, iter_update_par = 100, cov.corr = FALSE)
}
\arguments{
\item{ptest}{A pumping_test object.}

\item{model}{A character string specifying the model used in the parameter estimation.}

\item{method}{A character string specifying the sampling method used in the parameter
estimation. Currently the following methods are supported:
\itemize{
\item amcmc: Adaptative Markov Chain Monte Carlo proposed by Brooks and Rosenthal(2009).
This method requires the specification of the variances of the proposal distributions (
see proposal.sigma below).
\item amcmc1: Adaptative Markov Chain Monte Carlo proposed by Bai(2009). This method does
not require the specification of any additional parameter.
\item twalk: transverse-walk method proposed by Christen and Fox (2010). This methods does
not require any additional parameter.
}}

\item{prior.pdf}{A character vector with the names of the probability density functions used
for each hydraulic parameter. Currently only 'unif' and 'norm' are implemented.}

\item{prior.parameters}{A matrix with the parameters of the probability density functions of the
hydraulic parameters used in the drawdown calculations. For the uniform distribution, this parameters
are the minimun and maximum, whereas for the normal distribution the mean and standard deviation
must be specified.}

\item{iterations}{An integer specifying the number of iterations required for sampling.}

\item{burnIn}{An integer specifying the length of the burn-in period of the Markov Chain.}

\item{seed}{A random seed.}

\item{proposal.sigma}{A numeric vector with the standard deviation of the normal distributions used
as proposal distribution. These standard deviations are only used during the first stage of the
sampling where the proposals come from a set of independent normal distributions.}

\item{iter_update_par}{An integer specifying the number of iterations to update the covariance matrix
of the proposal distribution.}

\item{cov.corr}{A logical flag indicating if the covariance matrix needs to be corrected for
positive definiteness.}
}
\value{
A list with the hydraulic parameters of the model (includes transmissivity, storage
coefficient and radius of influence) and the fitted parameters (includes a and t0)
}
\description{
Function to estimate the aquifer parameters from a pumping test using Markov Chain Monte Carlo
simulation.
}
\examples{
\dontrun{
# Bayesian estimation of hydraulic parameters for a confined aquifer
data("theis")
# Create a pumping_test object
ptest.theis <- pumping_test("Well1", Q = 0.01388, r = 250,
                            t = theis$t, s = theis$s)
# Define prior distributions of hydraulic parameters
prior.pdf <- rep("unif", 3)
prior.parameters <- matrix(0, 3, 2)
# # Transmissivity PDF par
prior.parameters[1, ] <- c(1e-5, 1e-2)
# Storage coefficient PDF par
prior.parameters[2, ] <- c(1e-7, 1e-3)
# Std deviation of residuals PDF par
prior.parameters[3, ] <- c(1e-05, 0.1)
proposal.sigma <- c(0.1, 5, 0.001)
# Parameter estimation using AMCMC
ptest.theis.mcmc <- fit.sampling(ptest = ptest.theis,
                    model = "theis", method = "amcmc",
                    prior.pdf = prior.pdf,
                    prior.parameters = prior.parameters,
                    iterations = 30000, burnIn = 25000, seed = 12355,
                    proposal.sigma = proposal.sigma,
                    iter_update_par = 300, cov.corr = TRUE)
# Assign parameters
hydraulic.parameters(ptest.theis) <-
ptest.theis.mcmc$hydraulic.parameters[25000:30000,]
hydraulic.parameter.names(ptest.theis) <-
ptest.theis.mcmc$hydraulic.parameters.names
estimated(ptest.theis) <- TRUE
# Plot Results
cex <- 1.0
plot(ptest.theis, type = "uncertainty", cex = cex, cex.axis = cex,
     cex.lab = cex, cex.main = cex)
# Bayesian estimation using twalk
ptest.theis1 <- ptest.theis
ptest.theis.mcmc1 <- fit.sampling(ptest = ptest.theis1,
                                 model = "theis", method = "twalk",
                                 prior.pdf = prior.pdf,
                                 prior.parameters = prior.parameters,
                                 iterations = 30000)
# Assign parameters
hydraulic.parameters(ptest.theis1) <-
ptest.theis.mcmc1$hydraulic.parameters[25000:30000,]
hydraulic.parameter.names(ptest.theis1) <-
ptest.theis.mcmc1$hydraulic.parameters.names
estimated(ptest.theis1) <- TRUE
# Plot Results
cex <- 1.0
plot(ptest.theis1, type = "uncertainty", cex = cex, cex.axis = cex,
     cex.lab = cex, cex.main = cex)

# Bayesian estimation of hydraulic parameters for Phreatic aquifer
data("boulton")
ptest.boulton <- pumping_test("Well1", Q = 0.03, r = 20, t = boulton$t, s = boulton$s)
ptest.boulton.fit <- fit(ptest.boulton, 'boulton')
prior.pdf <- rep("unif", 5)
prior.parameters <- matrix(0, 5, 2)
# Transmissivity
prior.parameters[1, ] <- c(1e-5, 1e-1)
# Storage coefficient
prior.parameters[2, ] <- c(1e-6, 1e-1)
# Omegad (drainage porosity)
prior.parameters[3,] <- c(1e-4, 1e-1)
# phi
prior.parameters[4, ] <- c(1e-05, 0.1)
# Sigma
prior.parameters[5, ] <- c(1e-05, 0.1)
proposal.sigma <- c(0.1, 5, 5, 0.001, 0.001)
ptest.boulton.mcmc <- fit.sampling(ptest = ptest.boulton, model = 'boulton', method = 'amcmc',
                                  prior.pdf = prior.pdf, prior.parameters = prior.parameters,
                                  iterations = 10000, burnIn = 9000, seed = 12345,
                                  proposal.sigma = proposal.sigma,
                                  iter_update_par = 200, cov.corr = TRUE)
# Assign results
hydraulic.parameters(ptest.boulton) <-
ptest.boulton.mcmc$hydraulic.parameters[9000:10000,]
hydraulic.parameter.names(ptest.boulton) <-
ptest.boulton.mcmc$hydraulic.parameters.names
estimated(ptest.boulton) <- TRUE
# Plot Results
cex <- 1.0
plot(ptest.boulton, type = "uncertainty", cex = cex, cex.axis = cex,
     cex.lab = cex, cex.main = cex)
}
}
\references{
Bai. An Adaptive Directional Metropolis-within-Gibbs algorithm. Technical Report,
 Department of Statistics, University of Toronto, 2009. \url{http://www.utstat.toronto.edu/wordpress/WSFiles/technicalreports/0903.pdf}

 Roberts, G. O. & Rosenthal, J. S. Examples of adaptive MCMC Journal of Computational
 and Graphical Statistics, 2009, 18, 349-367.

 Christen, J. A. & Fox, C. A general purpose sampling algorithm for continuous distributions (the t-walk).
 Bayesian Analysis, 2010, 5, 2, 263-281.
}
\seealso{
Other base functions: \code{\link{additional.parameters<-}},
  \code{\link{confint.pumping_test}},
  \code{\link{confint_bootstrap}},
  \code{\link{confint_jackniffe}},
  \code{\link{confint_wald}}, \code{\link{estimated<-}},
  \code{\link{evaluate}}, \code{\link{fit.optimization}},
  \code{\link{fit.parameters<-}}, \code{\link{fit}},
  \code{\link{hydraulic.parameter.names<-}},
  \code{\link{hydraulic.parameters<-}},
  \code{\link{model.parameters}}, \code{\link{model<-}},
  \code{\link{plot.pumping_test}},
  \code{\link{plot_model_diagnostic}},
  \code{\link{plot_sample_influence}},
  \code{\link{plot_uncert}},
  \code{\link{print.pumping_test}},
  \code{\link{pumping_test}}, \code{\link{simulate}},
  \code{\link{summary.pumping_test}}
}
\author{
Oscar Garcia-Cabrejo \email{khaors@gmail.com}
}
\concept{base functions}
